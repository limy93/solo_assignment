from behave import given, when, then
from django.contrib.auth.models import User
from cc_shop.models import Product, Cart, CartItem, Country
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from uuid import uuid4
from selenium.common.exceptions import NoSuchElementException, TimeoutException

@given('an user is registered')
def step_impl(context):
    unique_username = f"testuser_{uuid4()}"
    context.user = User.objects.create_user(username=unique_username, password='testpassword')
    context.user.save()

@given('the user is logged in')
def step_impl(context):
    login_url=context.get_url('login')
    print("URL being tested:", login_url) 
    context.browser.get(login_url)
    # Wait for the username field to be present before proceeding
    WebDriverWait(context.browser, 10).until(
        EC.presence_of_element_located((By.NAME, 'username'))
    )
    username_field = context.browser.find_element(By.NAME, 'username')
    username_field.send_keys(context.user.username)
    context.browser.find_element(By.NAME, 'password').send_keys('testpassword')
    context.browser.find_element(By.TAG_NAME, 'form').submit()
    WebDriverWait(context.browser, 10).until(
        EC.presence_of_element_located((By.TAG_NAME, 'body'))
    )

@given('products are added to the cart')
def step_impl(context):
    country, _ = Country.objects.get_or_create(country_code='US', country_name='United States')
    product = Product.objects.create(
        country=country,
        description='Eco-friendly Water Bottle',
        price=20.00,
        type='Merchandise'
    )
    context.cart = Cart.objects.create(user=context.user)
    CartItem.objects.create(cart=context.cart, product=product, quantity=1)
    context.product = product

@when('the user updates the quantity of a product')
def step_when_user_updates_product_quantity(context):
    cart_detail_url = context.get_url('cart_detail')
    print("URL being tested:", cart_detail_url) 
    context.browser.get(cart_detail_url)
    try:
        quantity_input = WebDriverWait(context.browser, 20).until(
            EC.visibility_of_element_located((By.NAME, f'quantity-{context.product.id}'))
        )
        quantity_input.clear()
        quantity_input.send_keys('3')
        update_button = context.browser.find_element(By.NAME, 'update')
        update_button.click()
    except TimeoutException as e:
        context.browser.save_screenshot('debug_update_quantity.png')
        assert False, f"Timeout waiting for the quantity input or update button: {str(e)}"
        
@then('the total price of the updated product should be changed to the correct one')
def step_then_total_price_updated_correctly(context):
    expected_price = 3 * context.product.price
    WebDriverWait(context.browser, 10).until(
        EC.text_to_be_present_in_element((By.ID, f'total-price-{context.product.id}'), str(expected_price))
    )
    total_price_element = context.browser.find_element(By.ID, f'total-price-{context.product.id}')
    total_price = float(total_price_element.text.strip('$'))
    assert total_price == expected_price

@when('the user clicks the remove button for a product')
def step_when_user_removes_product(context):
    cart_detail_url = context.get_url('cart_detail')
    context.browser.get(cart_detail_url)
    try:
        remove_button = WebDriverWait(context.browser, 20).until(
            EC.visibility_of_element_located((By.NAME, f'remove-{context.product.id}'))
        )
        remove_button.click()
    except TimeoutException as e:
        context.browser.save_screenshot('debug_remove_product.png')
        assert False, f"Timeout waiting for the remove button: {str(e)}"

@then('the product should be removed from the cart')
def step_then_product_removed_from_cart(context):
    cart_detail_url = context.get_url('cart_detail')
    context.browser.get(cart_detail_url)
    try:
        context.browser.find_element(By.ID, f'product-row-{context.product.id}')
        element_found = True
    except NoSuchElementException:
        element_found = False
    assert not element_found, "Element should not be found as it should have been removed."

